<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-05-19T16:40:29-07:00</updated><id>http://localhost:4000/</id><title type="html">ExaFEL Research Site</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Calibrating the CSPad detector with experimental data</title><link href="http://localhost:4000/cspad_calib.html" rel="alternate" type="text/html" title="Calibrating the CSPad detector with experimental data" /><published>2017-05-19T00:00:00-07:00</published><updated>2017-05-19T00:00:00-07:00</updated><id>http://localhost:4000/cspad_calib</id><content type="html" xml:base="http://localhost:4000/cspad_calib.html">&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;p&gt;With the toolchain &lt;a href=&quot;/psana-cctbx-install.html&quot;&gt;built, installed&lt;/a&gt; and &lt;a href=&quot;/Build-test.html&quot;&gt;verified to work&lt;/a&gt;
the next step is to work through the processing pipeline using some real data.&lt;/p&gt;

&lt;p&gt;For the processing steps listed below, we will be making use of the guidelines given by this &lt;a href=&quot;http://www.phenix-online.org/newsletter/CCN_2016_07.pdf#page=18&quot;&gt;CCN newsletter article&lt;/a&gt;. Additional information can be found on the &lt;a href=&quot;http://viper.lbl.gov/cctbx.xfel/index.php/Main_Page&quot;&gt;cctbx.xfel wiki&lt;/a&gt;. As per the information in the newsletter article, the process of operating the cctbx.xfel pipeline involves three main stages:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Calibration
Discovery
Batch processing
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Further information on these stages is provided in the above resource locations.&lt;/p&gt;

&lt;h1 id=&quot;step-1-calibration&quot;&gt;Step 1. Calibration&lt;/h1&gt;

&lt;p&gt;This step refers to the initialisation of the appropriate parameters for the detector used in the experiment. The alignment of the detector segments, determining which pixels are hot/cold (always bright, or always dark), calculating averages, and determining the detector gain are among the necessary steps successfully analysing the data.&lt;/p&gt;

&lt;p&gt;Here, we have assumed the &lt;code class=&quot;highlighter-rouge&quot;&gt;$PERM&lt;/code&gt; environment variable is still set from the installation process outlined in post (install_post). For the purpose of this work, we are using &lt;a href=&quot;https://confluence.slac.stanford.edu/display/PSDMInternal/Pds+Xtc&quot;&gt;XTC&lt;/a&gt; data as collected from the &lt;a href=&quot;http://slac.stanford.edu/pubs/slacpubs/15250/slac-pub-15284.pdf&quot;&gt;CSPAD&lt;/a&gt; detector at &lt;a href=&quot;https://confluence.slac.stanford.edu/display/PSDM/CSPAD+Alignment&quot;&gt;LCLS&lt;/a&gt; (that is, raw data from the LCLS detectors). To be found by psana-cctbx.xfel, this data must be maintained in a specific directory hierarchy. Assuming a dataset named &lt;code class=&quot;highlighter-rouge&quot;&gt;cxim1416&lt;/code&gt;, the following layout must be adhered to:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/psdm/CXI/cxim1416/xtc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Additionally, the calibration data for the detector must be also maintained in the same directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/psdm/CXI/cxim1416/calib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;While the path to these directories can be specified and known by the given hierarchy and using the &lt;code class=&quot;highlighter-rouge&quot;&gt;SIT_*&lt;/code&gt; environment variables, it is also possible to directly specify the paths to &lt;code class=&quot;highlighter-rouge&quot;&gt;cxi.mpi_average&lt;/code&gt;&amp;lt;and potentially cxi.xtc_dump, cxi.xtc_process&amp;gt;. That is to say, we can negate the use of the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;SIT_PSDM_DATA&lt;/code&gt;, and pass the directories as arguments.&lt;/p&gt;

&lt;h2 id=&quot;averaging&quot;&gt;Averaging&lt;/h2&gt;

&lt;p&gt;For this stage, we begin by analysing data from a dark run (i.e. where X-rays were not incident upon the target), as this can tell which pixels are trustworthy for further examinations. We perform this using the &lt;code class=&quot;highlighter-rouge&quot;&gt;cxi.mpi_average&lt;/code&gt; command, as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cxi.mpi_average --experiment&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cxim1416 --run&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;54 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--address&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CxiDs1.0:Cspad.0 --detz-offset&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;585.5 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--verbose -g 6.85 --xtc-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/psdm/cxi/cxim1416/xtc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--calib_dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/psdm/cxi/cxim1416/calib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;--experiment=cxim1416&lt;/code&gt; is the experiment name, &lt;code class=&quot;highlighter-rouge&quot;&gt;--run=54&lt;/code&gt; is the specific run of the data to be analysed, &lt;code class=&quot;highlighter-rouge&quot;&gt;--address=CxiDs1.0:Cspad.0&lt;/code&gt; specifies the detector type, &lt;code class=&quot;highlighter-rouge&quot;&gt;--detz-offset=585.5&lt;/code&gt; is the Z-axis offset of the X-ray source from the detector, &lt;code class=&quot;highlighter-rouge&quot;&gt;-g 6.85&lt;/code&gt; is the gain ratio betwen low and high gain detector regions, &lt;code class=&quot;highlighter-rouge&quot;&gt;--xtc-dir=$PERM/psdm/cxi/cxim1416/xtc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--calib_dir=$PERM/psdm/cxi/cxim1416/calib&lt;/code&gt; are the previously mentioned data and calibration directory paths.&lt;/p&gt;

&lt;p&gt;The above command generates average (&lt;code class=&quot;highlighter-rouge&quot;&gt;cxim1416_avg-r0054.cbf&lt;/code&gt;), standard deviation (&lt;code class=&quot;highlighter-rouge&quot;&gt;cxim1416_stddev-r0054.cbf&lt;/code&gt;), and composite maximum (&lt;code class=&quot;highlighter-rouge&quot;&gt;cxim1416_max-r0054.cbf&lt;/code&gt;) output images over all events detected for the given run number.&lt;/p&gt;

&lt;p&gt;The XTC file naming scheme is composed of a numerical identifier (&lt;code class=&quot;highlighter-rouge&quot;&gt;eXYZ-&lt;/code&gt;), with mapping to name determined from &lt;code class=&quot;highlighter-rouge&quot;&gt;$PERM/psdm/data/ExpNameDb/experiment-db.dat&lt;/code&gt;, followed by the run number (&lt;code class=&quot;highlighter-rouge&quot;&gt;rXYZW-&lt;/code&gt;) indicating a specific instance of data collection. Given the throughput of data, there are multiple data acquisition (DAQ) systems working simulataneously on the detector, and each output their own data stream (&lt;code class=&quot;highlighter-rouge&quot;&gt;sXY-&lt;/code&gt;). The recombination of this data is performed by psana, and abstracted away from cctbx.xfel users. Next, the chunk number is given, wherein the data is broken up into chunks of a given size. As the data is streamed from the detector, when a certain threshold is reached, the data can be broken into a new chunk (&lt;code class=&quot;highlighter-rouge&quot;&gt;cXY&lt;/code&gt;). For the above command, the processing would be performed on the streams matching &lt;code class=&quot;highlighter-rouge&quot;&gt;e780-r0054-s[0-9][0-9]-c[0-9][0-9].xtc&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pixel-mask&quot;&gt;Pixel mask&lt;/h2&gt;
&lt;p&gt;From the previous step, we have created three images which can be used to determine which pixels can be trusted for the experimental data based on the detected pixel intensities measured in analogue to digital units (ADU), &lt;script type=&quot;math/tex&quot;&gt;I_{jk}^{\xi}&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;j,k&lt;/script&gt; are indices along the XY plane, and &lt;script type=&quot;math/tex&quot;&gt;\xi \in \{\textrm{avg,std,max} \}&lt;/script&gt; denotes the average, standard deviation, and maximum images respectively. For the average image data:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
I_{jk}^{\textrm{avg}} &amp;\leq 0 &amp;&amp;\rightarrow \textrm{dead pixel}  \\
I_{jk}^{\textrm{avg}} &amp;\gt 2\times10^3 &amp;&amp;\rightarrow \textrm{hypersensitive pixel.}
    \end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Similarly for the standard deviation image,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
I_{jk}^{\textrm{std}} &amp;\leq 0 &amp;&amp;\rightarrow \textrm{dead pixel}  \\
I_{jk}^{\textrm{std}} &amp;\gt 10 &amp;&amp;\rightarrow \textrm{hypersensitive pixel,}
    \end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;and for the composite maximum,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
I_{jk}^{\textrm{max}} &amp;\lesssim 300 &amp;&amp;\rightarrow \textrm{dead pixel,}  \\
    \end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;where the composite maximum has only a lower bounded value. Assuming a 1/0 Boolean flag for every pixel, and the above intensity ranges, we can define a mask for trusted and untrusted pixels, &lt;script type=&quot;math/tex&quot;&gt;F_{j,k}&lt;/script&gt;, as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
F_{jk} = \begin{cases}
1, &amp; \textrm{if } (0 \leq I_{jk}^{\textrm{avg}} \leq 2\times10^3) \wedge (0 \leq I_{jk}^{\textrm{std}} \leq 10) \wedge (300 \leq I_{jk}^{\textrm{max}}) \\
0, &amp; \textrm{otherwise}
\end{cases}. %]]&gt;&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;\wedge&lt;/script&gt; denotes a logical AND operation. Performing an element-wise (Hadamard) product of the resulting mask values with the collected data allows only the values that are trusted to “sieve” through the mask and be used in further analysis.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-mask&quot;&gt;Creating the mask&lt;/h3&gt;
&lt;p&gt;To create the mask we make use of the averaged and standard deviation data for a dark run as discussed above, as well as a maximum image of a bright run we intend to apply the mask to. Assuming &lt;code class=&quot;highlighter-rouge&quot;&gt;--run=54&lt;/code&gt; for a dark run, and &lt;code class=&quot;highlighter-rouge&quot;&gt;--run=74&lt;/code&gt; for a bright run, we construct the mask as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cxi.make_dials_mask --maxproj-min&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;300 -o mask.pickle &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  cxim1416_avg-r0054.cbf cxim1416_stddev-r0054.cbf cxim1416_max-r0074.cbf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The output file &lt;code class=&quot;highlighter-rouge&quot;&gt;mask.pickle&lt;/code&gt; is in a python specific file format known as &lt;a href=&quot;http://viper.lbl.gov/cctbx.xfel/index.php/File_formats&quot;&gt;pickle&lt;/a&gt;, for holding binary and metadata. We can set the lower threshold of the max limit manually (&lt;code class=&quot;highlighter-rouge&quot;&gt;--maxproj-min=300&lt;/code&gt;), as it may require fine tuning to find the optimal value for the dataset. The resulting file maximum file &lt;code class=&quot;highlighter-rouge&quot;&gt;--run=74&lt;/code&gt; can be visualised with the &lt;a href=&quot;http://dials.lbl.gov/&quot;&gt;DIALS&lt;/a&gt; image viewer as using the generated mask as&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  dials.image_viewer cxim1416_max-r0074.cbf &lt;span class=&quot;nv&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mask.pickle
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;quadrant-alignment&quot;&gt;Quadrant alignment&lt;/h3&gt;
&lt;p&gt;The CSPad detector features &lt;script type=&quot;math/tex&quot;&gt;32\times 2&lt;/script&gt; Si detectors, of which are distributed over four quadrants for the detector. It is necessary to determine the optimal alignment of these quadrants relative to one another, as it can vary across experiments due to the modularity of the detector. As such, one method to obtain and correct for the inter-quadrant spacings is through the use of powder diffraction rings. This assumes crystals of all possible orientations contribute to the diffraction process, and therefore generate rings at a radius determined by the beam wavelength. This is due to all possible Fourier components (Bragg peaks) being observed. By assuming that these rings are concentric over a &lt;script type=&quot;math/tex&quot;&gt;2\pi&lt;/script&gt; angular sweep, the detectors can be positioned to optimise this annular condition.&lt;/p&gt;

&lt;p&gt;This is checked with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;cspad.quadrants_cbf&lt;/code&gt;. Assuming the beam centre is appropriately positioned relative to the detector quadrants, a rotation of the quadrant through &lt;script type=&quot;math/tex&quot;&gt;\pi/4&lt;/script&gt; about the beam center yield high correlation with the unrotated data. The above command performs a planar search for the offsets that optimise this correlation, and use these to determine the alignment of the quadrants. Following the correlation examination, the command outputs a new file with the corrected quadrant values. Assuming the composite maximum for a bright run (&lt;code class=&quot;highlighter-rouge&quot;&gt;--run=74&lt;/code&gt;) the command is run as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cspad.quadrants_cbf ./cxim1416_max-r0074.cbf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For this data set, the resulting output was&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Doing cross-correlation on panel ARRAY_D0Q0S1A0
Searching a grid with dimensions &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;41, 41&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
max cc  0.1589 is at &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6, 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Doing cross-correlation on panel ARRAY_D0Q1S1A0
Searching a grid with dimensions &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;41, 41&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
max cc  0.1611 is at &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-14, -3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Doing cross-correlation on panel ARRAY_D0Q2S1A0
Searching a grid with dimensions &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;41, 41&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
max cc  0.1491 is at &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-7, 11&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Doing cross-correlation on panel ARRAY_D0Q3S1A0
Searching a grid with dimensions &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;41, 41&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
max cc  0.1794 is at &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-4, 11&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Average CC:  0.1621
Saving result to ./cxim1416_max-r0074_cc.cbf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;indicating very low correlations overall (&lt;script type=&quot;math/tex&quot;&gt;\textrm{CC} \approx 16\%&lt;/script&gt;). To better align the quadrants, we should chose a data set that offers a much higher cross correlation. One such method for this is to examine all possible maxima for a dataset and to use that with highest correlation values for the quadrant alignment. Alternatively, we can generate a maxima of the maxima, and use this to calculate the cross-correlation with the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cxi.cspad_average &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;_max_&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.cbf -m all_max.cbf
cspad.quadrants_cbf all_max.cbf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With the quadrant positions now refined, the calibration files must be updated to reflect the new parameters.&lt;/p&gt;

&lt;p&gt;Full details on the CSPad detector geometry and alignment information can be found &lt;a href=&quot;https://confluence.slac.stanford.edu/display/PSDM/Detector+Geometry&quot;&gt;here&lt;/a&gt; and (here)[https://confluence.slac.stanford.edu/display/PSDM/CSPAD+Geometry+and+Alignment].&lt;/p&gt;

&lt;p&gt;Note:
  The CCN newsletter article mentions performing manual calibration using the LCLS tool &lt;code class=&quot;highlighter-rouge&quot;&gt;calibman&lt;/code&gt;, which is installed as part of psana. Running the calibman command line interface requires having the MySQL package available for python. This is installed with conda as&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda install mysql-python
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;However, note that calibman requires a user to be within the LCLS psana environment, and currently does not work on external systems.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Testing the psana-cctbx.xfel build</title><link href="http://localhost:4000/Build-test.html" rel="alternate" type="text/html" title="Testing the psana-cctbx.xfel build" /><published>2017-05-18T00:00:00-07:00</published><updated>2017-05-18T00:00:00-07:00</updated><id>http://localhost:4000/Build-test</id><content type="html" xml:base="http://localhost:4000/Build-test.html"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Installing the psana-cctbx toolchain</title><link href="http://localhost:4000/psana-cctbx-install.html" rel="alternate" type="text/html" title="Installing the psana-cctbx toolchain" /><published>2017-05-17T00:00:00-07:00</published><updated>2017-05-17T00:00:00-07:00</updated><id>http://localhost:4000/psana-cctbx-install</id><content type="html" xml:base="http://localhost:4000/psana-cctbx-install.html">&lt;p&gt;To ensure the port of cctbx.xfel to Cori goes smoothly, it is necessary to identify and outline the relevant steps required to process data from LCLS.&lt;/p&gt;

&lt;p&gt;As a quick guide, I will outline the steps required for this, and introduce example code where necessary.&lt;/p&gt;

&lt;h2 id=&quot;installing-the-psana-cctbxxfel-toolchain&quot;&gt;Installing the psana-cctbx.xfel toolchain&lt;/h2&gt;

&lt;p&gt;Firstly, we must ensure that the environment is correctly initialised to process the data. The following steps are a summary of those given for &lt;a href=&quot;https://confluence.slac.stanford.edu/display/PSDM/Offsite+Installation#OffsiteInstallation-InstallationofaSingleCondaEnvironment&quot;&gt;psana&lt;/a&gt;, and for &lt;a href=&quot;http://viper.lbl.gov/cctbx.xfel/index.php/Installation&quot;&gt;cctbx.xfel&lt;/a&gt;. It is encouraged to read the documentation at these locations for further information. The following commands assume a bash environment by default (alternative shells should also work, with alternative instructions given where necessary).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://conda.io/miniconda.html&quot;&gt;Miniconda&lt;/a&gt; for Python 2.7.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once installed, update the conda installation:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  conda update -y conda
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a conda environment for the installation:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; conda create -n myEnv
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Activate the newly created conda environment:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;activate myEnv
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install psana from the LCLS conda channel, replacing &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; with the appropriate RH Linux version {&lt;code class=&quot;highlighter-rouge&quot;&gt;5,6,7&lt;/code&gt;}:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; conda install -y --channel lcls-rhelX psana-conda
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install the following additional dependencies for building and running psana and cctbx:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; conda install h5py mpich2 wxpython pil libtiff
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a permanent location to install and build cctbx (referred to as &lt;code class=&quot;highlighter-rouge&quot;&gt;$PERM&lt;/code&gt; in the following steps):&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;my_dir&amp;gt;; mkdir &lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the experiment name database from SLAC to your local system. This step assumes the end-user has a SLAC account, and can access &lt;em&gt;psexport.slac.stanford.edu&lt;/em&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p &lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/psdm/data/ExpNameDb;
rsync -t psexport.slac.stanford.edu:/reg/g/psdm/data/ExpNameDb/experiment-db.dat &lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/psdm/data/ExpNameDb/
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Export the following psana environment variables:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SIT_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/psdm/data
 &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SIT_ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/psdm/data
 &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SIT_PSDM_DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SIT_ROOT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a cctbx.xfel directory, and acquire the bootstrap program for building and installation (&lt;code class=&quot;highlighter-rouge&quot;&gt;--no-check-certificate&lt;/code&gt; can often be required):&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir &lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/cctbx.xfel; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/cctbf.xfel
wget https://raw.githubusercontent.com/cctbx/cctbx_project/master/libtbx/auto_build/bootstrap.py --no-check-certificate
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Download and build the cctbx.xfel packages using the conda environment activated python. This step assumes the end-user has access to the LBNL system &lt;strong&gt;cci&lt;/strong&gt;. For the purpose of this guide we will currently focus only on LBNL developers.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python bootstrap.py hot update --builder&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xfel --cciuser&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;cciusername&amp;gt; --sfuser&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;githubusername&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Assuming C++ compilers exist on the path, the following step will build the XFEL version of cctbx; specify the number of available cores to enable parallel compilation:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python bootstrap.py build --builder&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xfel --with-python&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;which python&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; --nproc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;&lt;span class=&quot;c&quot;&gt;# cores available for compile&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The path environment variables are set up by running the following command:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/cctbx.xfel/build/setpaths.sh &lt;span class=&quot;c&quot;&gt;#Bash users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;or&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PERM&lt;/span&gt;/cctbx.xfel/build/setpaths.csh &lt;span class=&quot;c&quot;&gt;#csh users&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With the above steps the psana-cctbx.xfel build should now be installed, with all accessible commands working.&lt;/p&gt;</content><author><name></name></author><summary type="html">To ensure the port of cctbx.xfel to Cori goes smoothly, it is necessary to identify and outline the relevant steps required to process data from LCLS.</summary></entry></feed>